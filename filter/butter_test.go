package filter

import (
	"fmt"
	"math"
	"testing"

	"github.com/bkzy/micscript/numgo"
)

func TestButtap(t *testing.T) {
	tests := []struct {
		n int
		z numgo.Array
		p numgo.ComplexArray
		k float64
	}{
		{0, numgo.Array{}, numgo.ComplexArray{}, 1},
		{1, numgo.Array{}, numgo.ComplexArray{-1 - 0i}, 1},
		{2, numgo.Array{}, numgo.ComplexArray{(-0.7071067811865476 + 0.7071067811865475i), (-0.7071067811865476 - 0.7071067811865475i)}, 1},
		{3, numgo.Array{}, numgo.ComplexArray{(-0.5000000000000001 + 0.8660254037844386i), (-1 + 0i), (-0.5000000000000001 - 0.8660254037844386i)}, 1},
		{4, numgo.Array{}, numgo.ComplexArray{(-0.38268343236508984 + 0.9238795325112867i), (-0.9238795325112867 + 0.3826834323650898i), (-0.9238795325112867 - 0.3826834323650898i), (-0.38268343236508984 - 0.9238795325112867i)}, 1},
		{5, numgo.Array{}, numgo.ComplexArray{(-0.30901699437494745 + 0.9510565162951535i), (-0.8090169943749473 + 0.5877852522924731i), (-1 + 0i), (-0.8090169943749473 - 0.5877852522924731i), (-0.30901699437494745 - 0.9510565162951535i)}, 1},
	}
	for _, tt := range tests {
		z, p, k := buttap(tt.n)
		if !tt.z.IsEqual(z) {
			t.Error("z错误:期望值:", tt.z, "得到值:", z)
		}
		if !p.IsEqual(tt.p) {
			t.Error("p错误:期望值:", tt.p, "得到值:", p)
		}
		if math.Abs(tt.k-k) > 1e-5 {
			t.Error("k错误:期望值:", tt.k, "得到值:", k)
		}
	}
}

func TestLp2lpZpk(t *testing.T) {
	tests := []struct {
		z  numgo.Array
		p  numgo.ComplexArray
		k  float64
		wo float64
		oz numgo.Array
		op numgo.ComplexArray
		ok float64
	}{
		{numgo.Array{}, numgo.ComplexArray{}, 1, 1.6568542494923801,
			numgo.Array{}, numgo.ComplexArray{}, 1},
		{numgo.Array{}, numgo.ComplexArray{-1 - 0i}, 1, 1.6568542494923801,
			numgo.Array{}, numgo.ComplexArray{(-1.6568542494923801 + 0i)}, 1.6568542494923801},
		{numgo.Array{}, numgo.ComplexArray{(-0.7071067811865476 + 0.7071067811865475i), (-0.7071067811865476 - 0.7071067811865475i)}, 1, 1.6568542494923801,
			numgo.Array{}, numgo.ComplexArray{(-1.17157287525381 + 1.1715728752538097i), (-1.17157287525381 - 1.1715728752538097i)}, 2.7451660040609585},
		{numgo.Array{}, numgo.ComplexArray{(-0.5000000000000001 + 0.8660254037844386i), (-1 + 0i), (-0.5000000000000001 - 0.8660254037844386i)}, 1, 1.6568542494923801,
			numgo.Array{}, numgo.ComplexArray{(-0.8284271247461903 + 1.4348778704286014i), (-1.6568542494923801 + 0i), (-0.8284271247461903 - 1.4348778704286014i)}, 4.5483399593904155},
		{numgo.Array{}, numgo.ComplexArray{(-0.38268343236508984 + 0.9238795325112867i), (-0.9238795325112867 + 0.3826834323650898i), (-0.9238795325112867 - 0.3826834323650898i), (-0.38268343236508984 - 0.9238795325112867i)}, 1, 1.6568542494923801,
			numgo.Array{}, numgo.ComplexArray{(-0.6340506711244289 + 1.530733729460359i), (-1.530733729460359 + 0.6340506711244288i), (-1.530733729460359 - 0.6340506711244288i), (-0.6340506711244289 - 1.530733729460359i)}, 7.53593638985201},
		{numgo.Array{}, numgo.ComplexArray{(-0.30901699437494745 + 0.9510565162951535i), (-0.8090169943749473 + 0.5877852522924731i), (-1 + 0i), (-0.8090169943749473 - 0.5877852522924731i), (-0.30901699437494745 - 0.9510565162951535i)}, 1, 1.6568542494923801,
			numgo.Array{}, numgo.ComplexArray{(-0.5119961202954946 + 1.5757620305310442i), (-1.3404232450416844 + 0.973874493049735i), (-1.6568542494923801 + 0i), (-1.3404232450416844 - 0.973874493049735i), (-0.5119961202954946 - 1.5757620305310442i)}, 12.485948231430568},
	}
	for _, tt := range tests {
		z, p, k, err := lp2lpZpk(tt.z, tt.p, tt.k, tt.wo)
		if err != nil {
			t.Log(err)
		} else {
			if !z.IsEqual(tt.oz) {
				t.Error("z错误:期望值:", tt.oz, "得到值:", tt.z)
			}
			if !p.IsEqual(tt.op) {
				t.Error("p错误:期望值:", tt.op, "得到值:", tt.p)
			}
			if math.Abs(k-tt.ok) > 1e-5 {
				t.Error("k错误:期望值:", tt.ok, "得到值:", tt.k)
			}
		}
	}
}

func TestLp2hpZpk(t *testing.T) {
	tests := []struct {
		z  numgo.Array
		p  numgo.ComplexArray
		k  float64
		wo float64
		oz numgo.Array
		op numgo.ComplexArray
		ok float64
	}{
		{numgo.Array{}, numgo.ComplexArray{}, 1, 1.6568542494923801,
			numgo.Array{}, numgo.ComplexArray{}, 1},
		{numgo.Array{}, numgo.ComplexArray{-1 - 0i}, 1, 1.6568542494923801,
			numgo.Array{0}, numgo.ComplexArray{(-1.6568542494923801 + 0i)}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.7071067811865476 + 0.7071067811865475i), (-0.7071067811865476 - 0.7071067811865475i)}, 1, 1.6568542494923801,
			numgo.Array{0, 0}, numgo.ComplexArray{(-1.17157287525381 - 1.1715728752538097i), (-1.17157287525381 + 1.1715728752538097i)}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.5000000000000001 + 0.8660254037844386i), (-1 + 0i), (-0.5000000000000001 - 0.8660254037844386i)}, 1, 1.6568542494923801,
			numgo.Array{0, 0, 0}, numgo.ComplexArray{(-0.8284271247461903 - 1.4348778704286014i), (-1.6568542494923801 - 0i), (-0.8284271247461903 + 1.4348778704286014i)}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.38268343236508984 + 0.9238795325112867i), (-0.9238795325112867 + 0.3826834323650898i), (-0.9238795325112867 - 0.3826834323650898i), (-0.38268343236508984 - 0.9238795325112867i)}, 1, 1.6568542494923801,
			numgo.Array{0, 0, 0, 0}, numgo.ComplexArray{(-0.6340506711244289 - 1.530733729460359i), (-1.530733729460359 - 0.6340506711244288i), (-1.530733729460359 + 0.6340506711244288i), (-0.6340506711244289 + 1.530733729460359i)}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.30901699437494745 + 0.9510565162951535i), (-0.8090169943749473 + 0.5877852522924731i), (-1 + 0i), (-0.8090169943749473 - 0.5877852522924731i), (-0.30901699437494745 - 0.9510565162951535i)}, 1, 1.6568542494923801,
			numgo.Array{0, 0, 0, 0, 0}, numgo.ComplexArray{(-0.5119961202954946 - 1.5757620305310442i), (-1.3404232450416844 - 0.973874493049735i), (-1.6568542494923801 + 0i), (-1.3404232450416844 + 0.973874493049735i), (-0.5119961202954946 + 1.5757620305310442i)}, 1},
	}
	for i, tt := range tests {
		z, p, k, err := lp2hpZpk(tt.z, tt.p, tt.k, tt.wo)
		if err != nil {
			t.Log(err)
		} else {
			if !z.IsEqual(tt.oz) {
				t.Error(i, "z错误:期望值:", tt.oz, "得到值:", z)
			}
			if !p.IsEqual(tt.op) {
				t.Error(i, "p错误:期望值:", tt.op, "得到值:", p)
			}
			if math.Abs(k-tt.ok) > 1e-5 {
				t.Error(i, "k错误:期望值:", tt.ok, "得到值:", k)
			}
		}
	}
}

func TestLp2bpZpk(t *testing.T) {
	tests := []struct {
		z  numgo.Array
		p  numgo.ComplexArray
		k  float64
		wo float64
		bw float64
		oz numgo.ComplexArray
		op numgo.ComplexArray
		ok float64
	}{
		{numgo.Array{}, numgo.ComplexArray{}, 1, 1.6568542494923801, 1,
			numgo.ComplexArray{}, numgo.ComplexArray{}, 1},
		{numgo.Array{}, numgo.ComplexArray{-1 - 0i}, 1, 1.6568542494923801, 1,
			numgo.ComplexArray{0. + 0.i}, numgo.ComplexArray{-0.5 - 1.57960945i, -0.5 + 1.57960945i}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.7071067811865476 + 0.7071067811865475i), (-0.7071067811865476 - 0.7071067811865475i)}, 1, 1.6568542494923801, 1,
			numgo.ComplexArray{0. + 0.i, 0. + 0.i},
			numgo.ComplexArray{-0.27818715 - 1.30501409i, -0.27818715 + 1.30501409i,
				-0.42891963 + 2.01212087i, -0.42891963 - 2.01212087i}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.5000000000000001 + 0.8660254037844386i), (-1 + 0i), (-0.5000000000000001 - 0.8660254037844386i)}, 1, 1.6568542494923801, 1,
			numgo.ComplexArray{0. + 0.i, 0. + 0.i, 0. + 0.i},
			numgo.ComplexArray{-0.18614736 - 1.2623466i, -0.5 - 1.57960945i,
				-0.18614736 + 1.2623466i, -0.31385264 + 2.128372i,
				-0.5 + 1.57960945i, -0.31385264 - 2.128372i}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.38268343236508984 + 0.9238795325112867i), (-0.9238795325112867 + 0.3826834323650898i), (-0.9238795325112867 - 0.3826834323650898i), (-0.38268343236508984 - 0.9238795325112867i)}, 1, 1.6568542494923801, 1,
			numgo.ComplexArray{0. + 0.i, 0. + 0.i, 0. + 0.i, 0. + 0.i},
			numgo.ComplexArray{-0.13965717 - 1.24821052i, -0.40681994 - 1.4122254i,
				-0.40681994 + 1.4122254i, -0.13965717 + 1.24821052i,
				-0.24302627 + 2.17209005i, -0.5170596 + 1.79490883i,
				-0.5170596 - 1.79490883i, -0.24302627 - 2.17209005i}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.30901699437494745 + 0.9510565162951535i), (-0.8090169943749473 + 0.5877852522924731i), (-1 + 0i), (-0.8090169943749473 - 0.5877852522924731i), (-0.30901699437494745 - 0.9510565162951535i)}, 1, 1.6568542494923801, 1,
			numgo.ComplexArray{0. + 0.i, 0. + 0.i, 0. + 0.i, 0. + 0.i, 0. + 0.i},
			numgo.ComplexArray{-0.11172534 - 1.24180999i, -0.3317974 - 1.34109932i,
				-0.5 - 1.57960945i, -0.3317974 + 1.34109932i,
				-0.11172534 + 1.24180999i, -0.19729166 + 2.1928665i,
				-0.4772196 + 1.92888457i, -0.5 + 1.57960945i,
				-0.4772196 - 1.92888457i, -0.19729166 - 2.1928665i}, 1},
	}
	for i, tt := range tests {
		iz := numgo.RealArr2ComplexsArr(tt.z)
		z, p, k, err := lp2bpZpk(iz, tt.p, tt.k, tt.wo, tt.bw)
		if err != nil {
			t.Log(err)
		} else {
			if !z.IsEqual(tt.oz) {
				t.Error(i, "z错误:\n期望值:", tt.oz, "\n得到值:", z)
			}
			if !p.IsEqual(tt.op) {
				t.Error(i, "p错误:\n期望值:", tt.op, "\n得到值:", p)
			}
			if math.Abs(k-tt.ok) > 1e-5 {
				t.Error(i, "k错误:\n期望值:", tt.ok, "\n得到值:", k)
			}
		}
	}
}

func TestLp2bsZpk(t *testing.T) {
	tests := []struct {
		z  numgo.Array
		p  numgo.ComplexArray
		k  float64
		wo float64
		bw float64
		oz numgo.ComplexArray
		op numgo.ComplexArray
		ok float64
	}{
		{numgo.Array{}, numgo.ComplexArray{}, 1, 1.6568542494923801, 1,
			numgo.ComplexArray{}, numgo.ComplexArray{}, 1},
		//{numgo.Array{}, numgo.ComplexArray{-1 - 0i}, 1, 1.6568542494923801, 1,
		//	numgo.ComplexArray{0. + 1.65685425i, 0. - 1.65685425i}, numgo.ComplexArray{-0.5 - 1.57960945i, -0.5 + 1.57960945i}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.7071067811865476 + 0.7071067811865475i), (-0.7071067811865476 - 0.7071067811865475i)}, 1, 1.6568542494923801, 1,
			numgo.ComplexArray{0. + 1.65685425i, 0. + 1.65685425i, 0. - 1.65685425i, 0. - 1.65685425i},
			numgo.ComplexArray{-0.27818715 + 1.30501409i, -0.27818715 - 1.30501409i,
				-0.42891963 - 2.01212087i, -0.42891963 + 2.01212087i}, 1},
		// {numgo.Array{}, numgo.ComplexArray{(-0.5000000000000001 + 0.8660254037844386i), (-1 + 0i), (-0.5000000000000001 - 0.8660254037844386i)}, 1, 1.6568542494923801, 1,
		// 	numgo.ComplexArray{0. + 1.65685425i, 0. + 1.65685425i, 0. + 1.65685425i, 0. - 1.65685425i, 0. - 1.65685425i, 0. - 1.65685425i},
		// 	numgo.ComplexArray{-0.18614736 + 1.2623466i, -0.5 - 1.57960945i,
		// 		-0.18614736 - 1.2623466i, -0.31385264 - 2.128372i,
		// 		-0.5 + 1.57960945i, -0.31385264 + 2.128372i}, 1},
		{numgo.Array{}, numgo.ComplexArray{(-0.38268343236508984 + 0.9238795325112867i), (-0.9238795325112867 + 0.3826834323650898i), (-0.9238795325112867 - 0.3826834323650898i), (-0.38268343236508984 - 0.9238795325112867i)}, 1, 1.6568542494923801, 1,
			numgo.ComplexArray{0. + 1.65685425i, 0. + 1.65685425i, 0. + 1.65685425i, 0. + 1.65685425i,
				0. - 1.65685425i, 0. - 1.65685425i, 0. - 1.65685425i, 0. - 1.65685425i},
			numgo.ComplexArray{-0.13965717 + 1.24821052i, -0.40681994 + 1.4122254i,
				-0.40681994 - 1.4122254i, -0.13965717 - 1.24821052i,
				-0.24302627 - 2.17209005i, -0.5170596 - 1.79490883i,
				-0.5170596 + 1.79490883i, -0.24302627 + 2.17209005i}, 1},
		// {numgo.Array{}, numgo.ComplexArray{(-0.30901699437494745 + 0.9510565162951535i), (-0.8090169943749473 + 0.5877852522924731i), (-1 + 0i), (-0.8090169943749473 - 0.5877852522924731i), (-0.30901699437494745 - 0.9510565162951535i)}, 1, 1.6568542494923801, 1,
		// 	numgo.ComplexArray{0. + 1.65685425i, 0. + 1.65685425i, 0. + 1.65685425i, 0. + 1.65685425i,
		// 		0. + 1.65685425i, 0. - 1.65685425i, 0. - 1.65685425i, 0. - 1.65685425i,
		// 		0. - 1.65685425i, 0. - 1.65685425i},
		// 	numgo.ComplexArray{-0.11172534 + 1.24180999i, -0.3317974 + 1.34109932i,
		// 		-0.5 - 1.57960945i, -0.3317974 - 1.34109932i,
		// 		-0.11172534 - 1.24180999i, -0.19729166 - 2.1928665i,
		// 		-0.4772196 - 1.92888457i, -0.5 + 1.57960945i,
		// 		-0.4772196 + 1.92888457i, -0.19729166 + 2.1928665i}, 1},
	}
	for i, tt := range tests {
		iz := numgo.RealArr2ComplexsArr(tt.z)
		z, p, k, err := lp2bsZpk(iz, tt.p, tt.k, tt.wo, tt.bw)
		if err != nil {
			t.Log(err)
		} else {
			if !z.IsEqual(tt.oz) {
				t.Error(i, "z错误:\n期望值:", tt.oz, "\n得到值:", z)
			}
			if !p.IsEqual(tt.op) {
				t.Error(i, "p错误:\n期望值:", tt.op, "\n得到值:", p)
			}
			if math.Abs(k-tt.ok) > 1e-5 {
				t.Error(i, "k错误:\n期望值:", tt.ok, "\n得到值:", k)
			}
		}
	}
}

func TestShiftband(t *testing.T) {
	tests := []struct {
		in  numgo.ComplexArray
		wo  float64
		res numgo.ComplexArray
	}{
		{numgo.ComplexArray{-0.35355339 - 0.35355339i, -0.35355339 + 0.35355339i}, 1.6568542494923801,
			numgo.ComplexArray{-0.27818715 + 1.30501409i, -0.27818715 - 1.30501409i,
				-0.42891963 - 2.01212087i, -0.42891963 + 2.01212087i}},
		{numgo.ComplexArray{-0.25 - 0.4330127i, -0.5 - 0.i, -0.25 + 0.4330127i}, 1.6568542494923801,
			numgo.ComplexArray{-0.18614736 + 1.2623466i, -0.5 - 1.57960945i,
				-0.18614736 - 1.2623466i, -0.31385264 - 2.128372i,
				-0.5 + 1.57960945i, -0.31385264 + 2.128372i}},
	}
	for i, tt := range tests {
		res := shiftband(tt.in, tt.wo)
		if !res.IsEqual(tt.res) {
			t.Error(i, "p错误:\n期望值:", tt.res, "\n得到值:", res)
		}
	}
}

func TestBilinearZpk(t *testing.T) {
	tests := []struct {
		z  interface{}
		p  numgo.ComplexArray
		k  float64
		fs float64
		oz numgo.Array
		op numgo.ComplexArray
		ok float64
	}{
		{numgo.Array{0.}, numgo.ComplexArray{-0.795649469518632 - 0.i}, 1, 2,
			numgo.Array{1.}, numgo.ComplexArray{0.66817864 + 0.i}, 0.8340893189596494},
		{numgo.Array{0., 0., 0., 0., 0.}, numgo.ComplexArray{(-0.5895741820190996 - 1.8145227539437492i), (-1.5435252474154197 - 1.1214367352972994i), (-1.9079021307926405 - 0i), (-1.5435252474154197 + 1.1214367352972994i), (-0.5895741820190996 + 1.8145227539437492i)}, 1, 2,
			numgo.Array{1., 1., 1., 1., 1.}, numgo.ComplexArray{0.50745452 - 0.59598351i, 0.38638853 - 0.28046179i,
				0.35411857 + 0.i, 0.38638853 + 0.28046179i,
				0.50745452 + 0.59598351i}, 0.22246282296118136},
	}
	for i, tt := range tests {
		z, p, k, err := bilinearZpk(tt.z, tt.p, tt.k, tt.fs)
		if err != nil {
			t.Log(err)
		} else {
			zf, _ := z.(numgo.Array)
			if !zf.IsEqual(tt.oz) {
				t.Error(i, "z错误:\n期望值:", tt.oz, "\n得到值:", z)
			}
			if !p.IsEqual(tt.op) {
				t.Error(i, "p错误:\n期望值:", tt.op, "\n得到值:", p)
			}
			if math.Abs(k-tt.ok) > 1e-5 {
				t.Error(i, "k错误:\n期望值:", tt.ok, "\n得到值:", k)
			}
		}
	}
}

func TestButter(t *testing.T) {
	tests := []struct {
		N     int
		Wn    interface{}
		btype string
		fs    float64
		b     numgo.Array
		a     numgo.Array
		err   error
	}{
		{1, 0.125, "lp", 2.0, numgo.Array{0.16591068, 0.16591068}, numgo.Array{1., -0.66817864}, nil},
		{1, 0.125, "lp", 1.0, numgo.Array{0.29289322, 0.29289322}, numgo.Array{1., -0.41421356}, nil},
		{1, 0.125, "lp", 3.0, numgo.Array{0.11633651, 0.11633651}, numgo.Array{1., -0.76732699}, nil},
		{2, 0.225, "lp", 2.0, numgo.Array{0.0820961, 0.1641922, 0.0820961}, numgo.Array{1., -1.04220229, 0.37058668}, nil},
		{4, 0.325, "lp", 1.0, numgo.Array{0.21617864, 0.86471457, 1.29707185, 0.86471457, 0.21617864},
			numgo.Array{1., 1.17512564, 0.92564873, 0.31042133, 0.04766256}, nil},
		{5, 0.425, "lp", 3.0, numgo.Array{0.00549209, 0.02746047, 0.05492094, 0.05492094, 0.02746047, 0.00549209},
			numgo.Array{1., -2.14180469, 2.25801265, -1.28026743, 0.38926602, -0.04945954}, nil},

		{1, 0.125, "hp", 2.0, numgo.Array{0.83408932, -0.83408932}, numgo.Array{1., -0.66817864}, nil},
		{1, 0.125, "hp", 1.0, numgo.Array{0.70710678, -0.70710678}, numgo.Array{1., -0.41421356}, nil},
		{1, 0.125, "hp", 3.0, numgo.Array{0.88366349, -0.88366349}, numgo.Array{1., -0.76732699}, nil},
		{2, 0.225, "hp", 2.0, numgo.Array{0.60319724, -1.20639449, 0.60319724}, numgo.Array{1., -1.04220229, 0.37058668}, nil},
		{4, 0.325, "hp", 1.0, numgo.Array{0.03048527, -0.12194108, 0.18291162, -0.12194108, 0.03048527},
			numgo.Array{1., 1.17512564, 0.92564873, 0.31042133, 0.04766256}, nil},
		{5, 0.425, "hp", 3.0, numgo.Array{0.22246282, -1.11231411, 2.22462823, -2.22462823, 1.11231411, -0.22246282},
			numgo.Array{1., -2.14180469, 2.25801265, -1.28026743, 0.38926602, -0.04945954}, nil},

		{1, numgo.Array{0.125, 0.7}, "bp", 2.0,
			numgo.Array{0.5591789, 0., -0.5591789}, numgo.Array{1., -0.38655418, -0.1183578}, nil},
		{1, numgo.Array{0.125, 0.7}, "bp", 1.0, numgo.Array{}, numgo.Array{},
			fmt.Errorf("Digital filter critical frequencies must be 0 < Wn < fs/2(fs=1.000,fs/2=0.500).[数字滤波器的临界频率'Wn'必须大0小于fs/2]")},
		{1, numgo.Array{0.125, 0.7}, "bp", 3.0,
			numgo.Array{0.40733048, 0., -0.40733048}, numgo.Array{1., -0.93409983, 0.18533904}, nil},
		{2, numgo.Array{0.125, 0.7}, "bp", 2.0,
			numgo.Array{0.36545027, 0., -0.73090054, 0., 0.36545027}, numgo.Array{1., -0.7555928, -0.1020231, -0.04104238, 0.18513647}, nil},
		{4, numgo.Array{0.125, 0.45}, "bp", 1.0,
			numgo.Array{0.21617864, 0., -0.86471457, 0., 1.29707185, 0., -0.86471457, 0., 0.21617864},
			numgo.Array{1., 1.26211605, -0.49636923, -0.56820041, 0.79456354, 0.40531127, -0.25445634, -0.05351213, 0.04766256}, nil},
		{5, numgo.Array{0.125, 8}, "bp", 20.0,
			numgo.Array{0.33091225, 0., -1.65456123, 0., 3.30912246, 0., -3.30912246, 0., 1.65456123, 0., -0.33091225},
			numgo.Array{1., -1.90498676, -1.17123359, 2.99161984, 1.57732307, -2.67777067, -1.23279457, 1.16625981, 0.56972921, -0.20864514, -0.10950016}, nil},

		{1, numgo.Array{0.125, 0.7}, "bs", 2.0,
			numgo.Array{0.4408211, -0.38655418, 0.4408211}, numgo.Array{1., -0.38655418, -0.1183578}, nil},
		{1, numgo.Array{0.125, 0.7}, "bs", 1.0, numgo.Array{}, numgo.Array{},
			fmt.Errorf("Digital filter critical frequencies must be 0 < Wn < fs/2(fs=1.000,fs/2=0.500).[数字滤波器的临界频率'Wn'必须大0小于fs/2]")},
		{1, numgo.Array{0.125, 0.7}, "bs", 3.0,
			numgo.Array{0.59266952, -0.93409983, 0.59266952}, numgo.Array{1., -0.93409983, 0.18533904}, nil},
		{2, numgo.Array{0.125, 0.7}, "bs", 2.0,
			numgo.Array{0.22711796, -0.39831759, 0.62887744, -0.39831759, 0.22711796}, numgo.Array{1., -0.7555928, -0.1020231, -0.04104238, 0.18513647}, nil},
		{4, numgo.Array{0.125, 0.45}, "bs", 1.0,
			numgo.Array{0.03048527, 0.10896328, 0.26799109, 0.4138941, 0.4944478, 0.4138941, 0.26799109, 0.10896328, 0.03048527},
			numgo.Array{1., 1.26211605, -0.49636923, -0.56820041, 0.79456354, 0.40531127, -0.25445634, -0.05351213, 0.04766256}, nil},
		{5, numgo.Array{0.125, 8}, "bs", 20.0,
			numgo.Array{0.00165928, -0.01470142, 0.06039899, -0.15113287, 0.25470371, -0.30185436, 0.25470371, -0.15113287, 0.06039899, -0.01470142, 0.00165928},
			numgo.Array{1., -1.90498676, -1.17123359, 2.99161984, 1.57732307, -2.67777067, -1.23279457, 1.16625981, 0.56972921, -0.20864514, -0.10950016}, nil},
	}
	for i, tt := range tests {
		b, a, err := Butter(tt.N, tt.Wn, tt.btype, tt.fs)
		if !b.IsEqual(tt.b) {
			t.Error(i, "b 错误:\n期望值:", tt.b, "\n得到值:", b)
		}
		if !a.IsEqual(tt.a) {
			t.Error(i, "a 错误:\n期望值:", tt.a, "\n得到值:", a)
		}
		if err != nil {
			if err.Error() != tt.err.Error() {
				t.Error(i, "err 错误:\n期望值:", tt.err, "\n得到值:", err)
			}
		}
	}
}
